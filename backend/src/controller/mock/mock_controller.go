// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	middleware "github.com/MastoCred-Inc/web-app/middleware"
	models "github.com/MastoCred-Inc/web-app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockOperations) Middleware() *middleware.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware")
	ret0, _ := ret[0].(*middleware.Middleware)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockOperationsMockRecorder) Middleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockOperations)(nil).Middleware))
}

// RegisterUser mocks base method.
func (m *MockOperations) RegisterUser(ctx context.Context, user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockOperationsMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockOperations)(nil).RegisterUser), ctx, user)
}
